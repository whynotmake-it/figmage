import 'dart:io';

import 'package:figmage/src/command_runner.dart';
import 'package:figmage/src/commands/shared/forge_settings_providers.dart';
import 'package:figmage/src/domain/models/config/config.dart';
import 'package:figmage/src/domain/models/style/design_style.dart';
import 'package:figmage/src/domain/providers/config_providers.dart';
import 'package:figmage/src/domain/providers/design_token_providers.dart';
import 'package:figmage/src/domain/providers/logger_providers.dart';
import 'package:mocktail/mocktail.dart';
import 'package:riverpod/riverpod.dart';
import 'package:test/test.dart';

import '../test/test_util/create_container.dart';
import 'util/mock_logger.dart';

/// A file that contains only local styles, no library styles.
const localStylesFileId = "HHUVTJ7lsjhG24SQB5h0zX";

void main() {
  group("GenerationNotifier", timeout: const Timeout(Duration(minutes: 1)), () {
    late ProviderContainer container;
    late String? token;

    late Directory testDirectory;

    late MockProgress mockProgress;
    late MockLogger mockLogger;
    late Config config;

    late List<String> args;

    late FigmageCommandRunner runner;

    setUp(() {
      config = const Config();
      testDirectory = Directory("./test_package");
      mockProgress = MockProgress.create();
      mockLogger = MockLogger.createWithMockProgress(mockProgress);
      container = createContainer(
        overrides: [
          configProvider.overrideWith((ref, arg) => config),
          loggerProvider.overrideWith((ref) => mockLogger),
        ],
      );
      token = Platform.environment['FIGMA_FREE_TOKEN'];
      runner = FigmageCommandRunner(container);
    });

    tearDown(() {
      try {
        testDirectory.deleteSync(recursive: true);
      } catch (_) {}
    });

    group('can generate from local styles file', () {
      setUp(() {
        args = [
          'forge',
          '--token',
          token!,
          '--fileId',
          localStylesFileId,
          '--path',
          testDirectory.path,
        ];
      });

      test(
        'should generate 7 unpublished styles by default',
        () async {
          await runner.run(args);
          final files = [
            File("${testDirectory.path}/lib/src/colors.dart"),
            File(
              "${testDirectory.path}/lib/src/typography.dart",
            ),
          ];
          final argResults = runner.parse(args).command!;
          final settings =
              await container.read(settingsProvider(argResults).future);
          final styles = await container.read(stylesProvider(settings).future);

          expect(styles, hasLength(7));
          expect(files.every((f) => f.existsSync()), true);
        },
      );

      test(
        'should generate correct color styles',
        () async {
          await runner.run(args);

          final argResults = runner.parse(args).command!;
          final settings =
              await container.read(settingsProvider(argResults).future);
          final styles = await container.read(stylesProvider(settings).future);

          expect(
            styles,
            containsAll(
              const [
                ColorDesignStyle(
                  id: '1:6',
                  fullName: 'primitives/red/50',
                  value: 0xFFFF0000,
                ),
                ColorDesignStyle(
                  id: '1:8',
                  fullName: 'primitives/green/50',
                  value: 0xFF00FF00,
                ),
                ColorDesignStyle(
                  id: '1:11',
                  fullName: 'primitives/blue/50',
                  value: 0x800000FF,
                ),
              ],
            ),
          );
        },
      );
      test('generates package name from directory by default', () async {
        await runner.run(args);
        final pubspec = File("${testDirectory.path}/pubspec.yaml");
        final pubspecContent = pubspec.readAsStringSync();
        expect(pubspecContent, contains("name: test_package"));
        expect(
          pubspecContent,
          contains(
            "description: A design tokens package, generated by figmage",
          ),
        );
      });

      test('uses config package name and warns if it is different', () async {
        config = const Config(packageName: "different_name");
        await runner.run(args);
        final pubspec = File("${testDirectory.path}/pubspec.yaml");
        final pubspecContent = pubspec.readAsStringSync();
        expect(pubspecContent, contains("name: different_name"));
        verify(
          () => mockLogger.warn(
            "The package name different_name does not match the directory name "
            "test_package.",
          ),
        );
      });

      test('sanitizes directory name and warns user', () async {
        testDirectory = Directory("./Test Package");
        args = [
          'forge',
          '--token',
          token!,
          '--fileId',
          localStylesFileId,
          '--path',
          testDirectory.path,
        ];
        await runner.run(args);
        final pubspec = File("${testDirectory.path}/pubspec.yaml");
        final pubspecContent = pubspec.readAsStringSync();
        expect(pubspecContent, contains("name: test_package"));
        verify(
          () => mockLogger.warn(
            "The package name test_package does not match the directory name "
            "Test Package.",
          ),
        );
      });

      test('logs correctly', () async {
        await runner.run(args);

        verify(
          () => mockLogger.progress("Fetching all variables..."),
        );
        verify(
          () => mockProgress.fail(
            'Failed to fetch variables: Unauthorized. Make sure you have a '
            'valid access token that can access the file and that you are '
            'a Figma Enterprise team member.',
          ),
        );

        verify(
          () => mockLogger.progress("Fetching all styles..."),
        );
        verify(
          () => mockProgress.complete(
            'Found 7 styles',
          ),
        );

        verify(
          () => mockLogger.progress(
            "Generating package in ./test_package...",
          ),
        );
        verify(
          () => mockProgress.complete(
            'Generated package at ./test_package with 8 files',
          ),
        );

        verify(
          () => mockLogger.progress("Generating theme classes for 2 files..."),
        );
        verify(
          () => mockProgress.complete(),
        );

        verify(
          () => mockLogger
              .progress("Creating library form 2 generation results..."),
        );

        verify(
          () => mockLogger.progress("Writing files..."),
        );
        verify(
          () => mockProgress.complete(
            'Wrote 2 files',
          ),
        );

        verify(
          () => mockLogger.progress("Running post generation tasks..."),
        );

        verifyInOrder([
          () => mockProgress.update('Running pub get in "./test_package"'),
          () => mockProgress.update('Running dart format in "./test_package"'),
          () => mockProgress.update('Running dart fix in "./test_package"'),
        ]);
      });

      test(
        'generates no styles if stylesFromLibrary is true',
        () async {
          config = const Config(stylesFromLibrary: true);
          await expectLater(runner.run(args), throwsArgumentError);
        },
      );

      test('generates no pubspec if asPackage is false', () async {
        config = const Config(asPackage: false);
        await runner.run(args);
        final pubspec = File("${testDirectory.path}/pubspec.yaml");
        expect(pubspec.existsSync(), false);
      });

      test('generates no barrel file if asPackage is false', () async {
        config = const Config(asPackage: false);
        await runner.run(args);
        final barrel = File("${testDirectory.path}/lib/test_package.dart");
        expect(barrel.existsSync(), false);
      });
    });
  });
}
