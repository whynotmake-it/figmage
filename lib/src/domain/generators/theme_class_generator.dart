import 'package:code_builder/code_builder.dart';

/// The result of a theme class generation.
///
/// Contains a class, and an extension, that allows to obtain a reference to the
/// class from a `BuildContext`.
typedef ThemeClassGeneratorResult = ({Class $class, Extension $extension});

/// {@template generator}
/// The superclass for all generators that can generate
/// a ThemeClassGeneratorResult
///
/// All generators generate a `BuildContext` extension.
/// {@endtemplate}
abstract interface class ThemeClassGenerator {
  /// The prefix for all generated files that are generated by this package.
  static const generatedFilePrefix = '''
      // coverage:ignore-file
      // GENERATED CODE - DO NOT MODIFY BY HAND
      // ignore_for_file: type=lint
  ''';

  /// The name of the generated class.
  String get className;

  /// Whether the return type of the `BuildContext` extension should be
  /// nullable.
  ///
  /// If this is false, the extension will contain a null assertion, which means
  /// your code will throw if you haven't provided the respective
  /// `ThemeExtension` in the widget tree.
  bool get buildContextExtensionNullable;

  /// Generates the class and the extension for the class.
  ///
  /// See [ThemeClassGeneratorResult] for more information.
  ThemeClassGeneratorResult generate();
}

/// A [ThemeClassGenerator] for `ThemeExtension` from
/// `package:flutter/material.dart`.
///
/// Generates the ThemeExtension class, constants for all values, as well as
/// a `BuildContext` extension.
abstract interface class ThemeExtensionGenerator<T>
    implements ThemeClassGenerator {
  /// A [Reference] to the symbol (e.g., Color, TextStyle) used in the theme
  /// extension.
  Reference get symbolReference;

  /// Generates the `ThemeExtension` class and the constants for all values,
  /// as well as a `BuildContext` extension and returns the resulting
  /// code as a ThemeClassGeneratorResult.
  @override
  ThemeClassGeneratorResult generate();
}
